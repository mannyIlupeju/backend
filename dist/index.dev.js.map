{"version":3,"sources":["index.js"],"names":["express","require","app","dotenv","config","mongoose","cors","bodyParser","blogRoute","authRoute","use","json","limit","extended","urlencoded","PORT","process","env","connect","CONNECTION_URL","useNewUrlParser","useUnifiedTopology","then","listen","console","log","error","set"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGF,OAAO,EAAnB;;AACA,IAAMG,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBG,MAAlB,EAAf;;AACA,IAAMC,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMM,UAAU,GAAGN,OAAO,CAAC,aAAD,CAA1B,C,CAIA;;;AACA,IAAMO,SAAS,GAAGP,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMQ,SAAS,GAAGR,OAAO,CAAC,eAAD,CAAzB,C,CAEA;;;AACAC,GAAG,CAACQ,GAAJ,CAAQH,UAAU,CAACI,IAAX,CAAgB;AAACC,EAAAA,KAAK,EAAE,MAAR;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAAhB,CAAR;AACAX,GAAG,CAACQ,GAAJ,CAAQH,UAAU,CAACO,UAAX,CAAsB;AAACF,EAAAA,KAAK,EAAE,MAAR;AAAgBC,EAAAA,QAAQ,EAAC;AAAzB,CAAtB,CAAR;AAGAX,GAAG,CAACQ,GAAJ,CAAQJ,IAAI,EAAZ,E,CAGA;;AAEAJ,GAAG,CAACQ,GAAJ,CAAQ,OAAR,EAAiBF,SAAjB;AACAN,GAAG,CAACQ,GAAJ,CAAQ,YAAR,EAAsBD,SAAtB;AAEA,IAAMM,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC,C,CAEA;;AACAV,QAAQ,CAACa,OAAT,CAAiBF,OAAO,CAACC,GAAR,CAAYE,cAA7B,EAA6C;AAAEC,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAC;AAA5C,CAA7C,EACCC,IADD,CACM;AAAA,SAAKpB,GAAG,CAACqB,MAAJ,CAAWR,IAAX,EAAiB,YAAI;AAC9BS,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,GAFU,CAAL;AAAA,CADN,WAIO,UAACC,KAAD;AAAA,SAASF,OAAO,CAACC,GAAR,CAAYC,KAAZ,CAAT;AAAA,CAJP;AAMArB,QAAQ,CAACsB,GAAT,gBAA4B,KAA5B","sourcesContent":["const express = require('express')\nconst app = express()\nconst dotenv = require('dotenv').config()\nconst mongoose = require('mongoose')\nconst cors = require('cors')\nconst bodyParser = require('body-parser')\n\n\n\n//Import Routes\nconst blogRoute = require('./routes/blog')\nconst authRoute = require('./routes/auth')\n\n//setting up the body parser\napp.use(bodyParser.json({limit: \"30mb\", extended: true}))\napp.use(bodyParser.urlencoded({limit: \"30mb\", extended:true}))\n\n\napp.use(cors())\n\n\n//Creating middlewares\n\napp.use('/blog', blogRoute)\napp.use('/blog/auth', authRoute)\n\nconst PORT = process.env.PORT || 8080\n\n//CONNECTING TO MONGOOSE\nmongoose.connect(process.env.CONNECTION_URL, { useNewUrlParser: true, useUnifiedTopology:true })\n.then(()=> app.listen(PORT, ()=>{\n  console.log('Server is up and running')\n}))\n.catch((error)=>console.log(error))\n\nmongoose.set(`strictQuery`, false)\n"],"file":"index.dev.js"}