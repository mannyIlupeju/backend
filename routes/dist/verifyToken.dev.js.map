{"version":3,"sources":["verifyToken.js"],"names":["jwt","require","module","exports","req","res","next","token","header","console","log","status","send","verified","verify","process","env","TOKEN_SECRET","user","error"],"mappings":";;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB,C,CAEA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACxC,MAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,eAAX,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,MAAG,CAACA,KAAJ,EAAW,OAAOF,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,eAAtB,CAAP;;AAEX,MAAI;AACD;AACA,QAAMC,QAAQ,GAAGb,GAAG,CAACc,MAAJ,CAAWP,KAAX,EAAkBQ,OAAO,CAACC,GAAR,CAAYC,YAA9B,CAAjB,CAFC,CAGF;;AACAb,IAAAA,GAAG,CAACc,IAAJ,GAAWL,QAAX,CAJE,CAImB;;AACrBP,IAAAA,IAAI;AACL,GAND,CAME,OAAOa,KAAP,EAAc;AACdd,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACD;AAGF,CAhBD","sourcesContent":["const jwt = require('jsonwebtoken');\n\n//Creating a middlweare function to check if user has that token before they can access a page\n//so every private route will have this middleware function\n\nmodule.exports = function(req, res, next) {\n  const token = req.header('Authorization');\n  console.log(token)\n  if(!token) return res.status(401).send ('Access denied');\n\n  try {\n     //set the variable to have the jwt.verify(token, secret)\n     const verified = jwt.verify(token, process.env.TOKEN_SECRET)\n    //the verify brings the payload that has the id and dateofcreation \n    req.user = verified; //we now have access to the req.user\n    next()\n  } catch (error) {\n    res.status(400).send('Invalid Token')\n  }\n\n\n}\n\n\n"],"file":"verifyToken.dev.js"}