{"version":3,"sources":["blogPost.js"],"names":["require","JsonWebTokenError","mongoose","blogMessage","jwt","res","blogPost","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","status","json","t0","message","stop","readPost","req","id","post","_context2","params","console","log","Types","ObjectId","isValid","abrupt","send","findById","createPost","newPost","_context3","body","save","deletePost","_context4","findByIdAndRemove","module","exports"],"mappings":"0BAA8BA,QAAQ,gBAA9BC,2BAAAA,kBACFC,SAAWF,QAAQ,YACnBG,YAFwBH,QAAQ,yBAA9BC,OAAAA,QAGe,yBACjBG,IAAO,eAFPD,QAAW,SAAGH,EAAQK,GAAX,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MACMT,YAAAU,QADN,KAAA,EACLP,EADKG,EAAAK,KAQbT,EAAIU,OAAO,KAAKC,KAAKV,GARRG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAUbJ,EAAIU,OAAO,KAAKC,KAAK,CAACE,QAAST,EAAAQ,GAAMC,UAVxB,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAKDC,SAAA,SAAAC,EAAAhB,GAAA,IAAAiB,EAAAC,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,GAAAW,EAAAD,EAAAI,OAAAH,GAAAI,QAAAC,IAAAL,GAAApB,SAAA0B,MAAAC,SAAAC,QAAAR,GAAA,CAAAE,EAAAb,KAAA,EAAA,MAAA,OAAAa,EAAAO,OAAA,SAAA1B,EAAAU,OAAA,KAAAiB,KAAA,yBAAA,KAAA,EAAA,OAAAR,EAAAb,KAAA,EAAAJ,mBAAAK,MAAAT,YAAA8B,SAEW9B,IAFX,KAAA,EAAAoB,EAAAC,EAAAV,KAAAT,EAAAW,KAAAO,GAAA,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAL,WAAAe,WAAA,SAAAb,EAAAhB,GAAA,IAAAkB,EAAAY,EAAA,OAAA5B,mBAAAC,MAAA,SAAA4B,GAAA,OAAA,OAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,KAAA,EAAA,OAAAY,EAAAF,EAAAgB,KAAAF,EAAA,IAAAhC,YAAAoB,GAAAa,EAAA1B,KAAA,EAKUQ,QAAAA,IAAAA,GALVkB,EAAAzB,KAAA,EAAAJ,mBAAAK,MAKSuB,EAArBG,QALY,KAAA,EA4BZjC,EAAIU,OAAO,KAAKC,KAAKmB,GA5BTC,EAAAzB,KAAA,GAAA,MAAA,KAAA,EAAAyB,EAAA1B,KAAA,EAAA0B,EAAAnB,GAAAmB,EAAA,MAAA,GAAA/B,EAAAU,OAAA,KAAAC,KAAA,CAAAE,QAAAkB,EAAAnB,GAAAC,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAkB,EAAAjB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAAoB,WAAA,SAAAlB,EAAAhB,GAAA,IAAAiB,EAAA,OAAAf,mBAAAC,MAAA,SAAAgC,GAAA,OAAA,OAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,KAAA,EAAA,GAAhBW,EAAAD,EAAAI,OAAAH,GASMF,SAAWQ,MAAAC,SAAXT,QAAqBf,GATX,CAAAmC,EAAA7B,KAAA,EAAA,MAAA,OAAA6B,EAAAT,OAAA,SASC1B,EAAAU,OAAA,KAAAiB,KAAA,yBATD,KAAA,EAAA,OAAAQ,EAAA7B,KAAA,EAAAJ,mBAAAK,MASCT,YAAAsC,kBAAAnB,IATD,KAAA,EASCjB,EAAAW,KAAA,CAAAE,QAAA,8BATD,KAAA,EAAA,IAAA,MAAA,OAAAsB,EAAArB,WASCuB,OAAAC,QAGXzC,CAAAA,QAAAA,QAAS0B,WAAAA,WAAeE,SAAAA,SAHbS,WAAAA","file":"blogPost.min.js","sourcesContent":["const { JsonWebTokenError } = require('jsonwebtoken')\nconst mongoose = require('mongoose')\nconst blogMessage = require('../models/blogMessage')\nconst verify = require('../routes/verifyToken')\nconst jwt = ('jsonwebtoken')\n\n\nconst getPost = async (req,res)=>{\n  try {\n    const blogPost = await blogMessage.find()\n    res.status(200).json(blogPost)\n  } catch (error) {\n    res.status(404).json({message: error.message})\n  }\n}\n\nconst readPost = async(req,res) => {\n  const {id} = req.params\n  console.log(id)\n  if(!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send('No Post with that id')\n\n  const post = await blogMessage.findById(id)\n\n  res.json(post)\n\n}\n\nconst createPost = async(req,res) => {\n  //withdraw post from req \n  const post = req.body\n  //To create new post push post inside blogMessage function\n  const newPost = new blogMessage(post)\n  try {\n    console.log(req)\n    await newPost.save();\n    res.status(201).json(newPost)\n  } catch (error) {\n    res.status(409).json({message: error.message})\n  }\n}\n\nconst deletePost = async(req, res) => {\n  const {id: id} = req.params\n\n  if(!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send('No post with that id')\n\n  await blogMessage.findByIdAndRemove(id)\n\n  res.json({message: 'Post deleted successfully'})\n\n}\n\n\nmodule.exports = {getPost, createPost, readPost, deletePost}\n\n"]}