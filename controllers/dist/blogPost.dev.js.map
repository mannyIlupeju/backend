{"version":3,"sources":["blogPost.js"],"names":["require","JsonWebTokenError","mongoose","blogMessage","verify","jwt","getPost","req","res","find","blogPost","status","json","message","readPost","id","params","console","log","Types","ObjectId","isValid","send","findById","post","createPost","body","newPost","save","deletePost","findByIdAndRemove","likePost","findByIdAndUpdate","likeCount","updatedPost","module","exports"],"mappings":"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","sourcesContent":["const { JsonWebTokenError } = require('jsonwebtoken')\nconst mongoose = require('mongoose')\nconst blogMessage = require('../models/blogMessage')\nconst verify = require('../routes/verifyToken')\nconst jwt = ('jsonwebtoken')\n\n\nconst getPost = async (req,res)=>{\n  try {\n    const blogPost = await blogMessage.find()\n    res.status(200).json(blogPost)\n  } catch (error) {\n    res.status(404).json({message: error.message})\n  }\n}\n\nconst readPost = async(req,res) => {\n  const {id} = req.params\n  console.log(id)\n  if(!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send('No Post with that id')\n\n  const post = await blogMessage.findById(id)\n\n  res.json(post)\n\n}\n\nconst createPost = async(req,res) => {\n  //withdraw post from req \n  const post = req.body\n  //To create new post push post inside blogMessage function\n  const newPost = new blogMessage(post)\n  try {\n    await newPost.save();\n    res.status(201).json(newPost)\n  } catch (error) {\n    res.status(409).json({message: error.message})\n  }\n}\n\nconst deletePost = async(req, res) => {\n  const {id} = req.params\n\n  if(!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send('No post with that id')\n\n  await blogMessage.findByIdAndRemove(id)\n\n  res.json({message: 'Post deleted successfully'})\n\n}\n\n\nconst likePost = async(req, res) => {\n  const {id} = req.params\n  \n  if(!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send('No post with that id')\n\n  const post = await blogMessage.findById(id)\n\n  const updatedPost = await blogMessage.findByIdAndUpdate(id, {likeCount: post.likeCount + 1}, {new: true})\n\n  res.json(updatedPost)\n}\n\n\n\nmodule.exports = {getPost, createPost, readPost, deletePost, likePost}\n\n"],"file":"blogPost.dev.js"}