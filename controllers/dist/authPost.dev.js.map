{"version":3,"sources":["authPost.js"],"names":["User","require","jwt","bcrypt","registerValidation","loginValidation","isError","valid","registerPost","req","res","body","error","status","send","details","message","findOne","email","emailExist","genSalt","salt","hash","password","hashedPassword","user","name","save","savedUser","loginPost","compare","validPass","token","sign","_id","process","env","TOKEN_SECRET","header","module","exports"],"mappings":";;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB,C,CAAoC;;;AACpC,IAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB,C,CAAmC;;;eACWA,OAAO,CAAC,eAAD,C;IAA9CG,kB,YAAAA,kB;IAAoBC,e,YAAAA,e;;gBACAJ,OAAO,CAAC,KAAD,C;IAA1BK,O,aAAAA,O;IAASC,K,aAAAA,K;;AAGjB,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,GAAP,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnB;AADmB,gCAEHN,kBAAkB,CAACK,GAAG,CAACE,IAAL,CAFf,EAEZC,KAFY,uBAEZA,KAFY;;AAAA,eAGhBA,KAHgB;AAAA;AAAA;AAAA;;AAAA,2CAGFF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBC,OAAtC,CAHE;;AAAA;AAAA;AAAA,0CAMMhB,IAAI,CAACiB,OAAL,CAAa;AAACC,YAAAA,KAAK,EAAET,GAAG,CAACE,IAAJ,CAASO;AAAjB,WAAb,CANN;;AAAA;AAMbC,UAAAA,UANa;AAOnB,cAAIA,UAAJ,EAAgBT,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,EAPG,CASnB;;AATmB;AAAA,0CAUAX,MAAM,CAACiB,OAAP,CAAe,EAAf,CAVA;;AAAA;AAUbC,UAAAA,IAVa;AAAA;AAAA,0CAWUlB,MAAM,CAACmB,IAAP,CAAYb,GAAG,CAACE,IAAJ,CAASY,QAArB,EAA+BF,IAA/B,CAXV;;AAAA;AAWbG,UAAAA,cAXa;AAcnB;AACMC,UAAAA,IAfa,GAeN,IAAIzB,IAAJ,CAAS;AACpB0B,YAAAA,IAAI,EAAEjB,GAAG,CAACE,IAAJ,CAASe,IADK;AAEpBR,YAAAA,KAAK,EAAET,GAAG,CAACE,IAAJ,CAASO,KAFI;AAGpBK,YAAAA,QAAQ,EAAEC;AAHU,WAAT,CAfM;AAAA;AAAA;AAAA,0CAsBOC,IAAI,CAACE,IAAL,EAtBP;;AAAA;AAsBXC,UAAAA,SAtBW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBjBlB,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAzBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AA8BA,IAAMe,SAAS,GAAG,SAAZA,SAAY,CAAOpB,GAAP,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BACCL,eAAe,CAACI,GAAG,CAACE,IAAL,CADhB,EACRC,KADQ,oBACRA,KADQ;;AAAA,eAEZA,KAFY;AAAA;AAAA;AAAA;;AAAA,4CAEEF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBC,OAAtC,CAFF;;AAAA;AAAA;AAAA,0CAKIhB,IAAI,CAACiB,OAAL,CAAa;AAACC,YAAAA,KAAK,EAAET,GAAG,CAACE,IAAJ,CAASO;AAAjB,WAAb,CALJ;;AAAA;AAKTO,UAAAA,IALS;;AAAA,cAMXA,IANW;AAAA;AAAA;AAAA;;AAAA,4CAMEf,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,oBAArB,CANF;;AAAA;AAAA;AAAA,0CAWSX,MAAM,CAAC2B,OAAP,CAAerB,GAAG,CAACE,IAAJ,CAASY,QAAxB,EAAkCE,IAAI,CAACF,QAAvC,CAXT;;AAAA;AAWTQ,UAAAA,SAXS;;AAAA,cAYXA,SAZW;AAAA;AAAA;AAAA;;AAAA,4CAYOrB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,cAArB,CAZP;;AAAA;AAehB;AACA;AACMkB,UAAAA,KAjBU,GAiBF9B,GAAG,CAAC+B,IAAJ,CAAS;AAACC,YAAAA,GAAG,EAAET,IAAI,CAACS;AAAX,WAAT,EAA0BC,OAAO,CAACC,GAAR,CAAYC,YAAtC,CAjBE;AAkBhB3B,UAAAA,GAAG,CAAC4B,MAAJ,CAAW,eAAX,EAA4BN,KAA5B,EAAmClB,IAAnC,CAAwC;AAACkB,YAAAA,KAAK,EAALA;AAAD,WAAxC;;AAlBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AA0BAO,MAAM,CAACC,OAAP,GAAiB;AAAChC,EAAAA,YAAY,EAAZA,YAAD;AAAeqB,EAAAA,SAAS,EAATA;AAAf,CAAjB","sourcesContent":["\nconst User = require('../models/auth')\nconst jwt = require('jsonwebtoken') //for login verification\nconst bcrypt = require('bcryptjs') //we use this to protect the password \nconst {registerValidation, loginValidation} = require('../validation')\nconst { isError, valid } = require('joi')\n\n\nconst registerPost = async (req,res)=>{\n  //Validate data before we add a user \n  const {error} = registerValidation(req.body)\n  if(error) return res.status(400).send(error.details[0].message)\n\n  //check if user is in database\n  const emailExist = await User.findOne({email: req.body.email})\n  if (emailExist) res.status(400).send('Email already exists')\n\n  //Hash the password - We must protect password from being visible when we save it\n  const salt = await bcrypt.genSalt(10) //the complexity of the string that will get generated to protect our password\n  const hashedPassword = await bcrypt.hash(req.body.password, salt)\n\n  \n  // To Create a new user\n  const user = new User({\n    name: req.body.name,\n    email: req.body.email,\n    password: hashedPassword\n  });\n\n  try {\n    const savedUser = await user.save()\n    \n  } catch(err) {\n    res.status(400).send(err)\n  }\n}\n\n\nconst loginPost = async (req,res)=>{\n   const {error} = loginValidation(req.body)\n   if(error) return res.status(400).send(error.details[0].message)\n\n   //CHECK IF USER EXISTS\n   const user = await User.findOne({email: req.body.email})\n   if(!user) return res.status(400).send(\"Email is not found\") \n   \n   \n\n   //CHECK IF PASSWORD IS CORRECT\n   const validPass = await bcrypt.compare(req.body.password, user.password) \n   if(!validPass) return res.status(400).send('Login failed')\n\n   \n  //Create and assign a token\n  //it takes the ID to know the user is logged in and a secret token\n  const token = jwt.sign({_id: user._id}, process.env.TOKEN_SECRET); \n  res.header('Authorization', token).send({token})\n\n}\n\n\n\n\n\nmodule.exports = {registerPost, loginPost}"],"file":"authPost.dev.js"}